GUNS = {}
function getGun()
	for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
		if v:IsA('ModuleScript') and "ACS_Animations" or "TGIRoleplay_Settings" then
			return "ACS Normal"
		else
			return "Possible ACS Guns"
		end
	end
end
local roleplaysettings = getGun()
print(tostring(roleplaysettings))
if roleplaysettings=="ACS Normal"then
	for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
		if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
			table.insert(GUNS, v.Parent.Name) 
		end
	end
elseif roleplaysettings=="Possible ACS Guns" then
	game.StarterGui:SetCore("SendNotification", {Title = "Aviso!"; Text = "NÃ£o foi detectado um sistema ACS neste jogo."; Icon = "rbxassetid://10455493610"; Duration = 5;})
end


function getACSVersion()
	for i, v in pairs(game:GetService("ReplicatedStorage"):GetDescendants()) do
		if v:IsA('Configuration') and v.Name~="Framework" then
			if (v:FindFirstChild('GameRules')) then
				return "ACS 2.0.1"
			elseif (v:FindFirstChild('Config')) then
				return "ACS 1.7 Sequence"
			else
				return "VERSION NOT SUPPORTED"
			end
		end
	end
end
local VERSIONACS = getACSVersion()
print(tostring(VERSIONACS))

function getV()
for i, v in pairs(game.ReplicatedStorage:GetDescendants()) do
	if v:IsA('Configuration') and v.Name~="Framework" then
		return v
	end
end
end
GETV=getV()
print(tostring(GETV))



local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:connect(function()
	vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	wait(1)
	vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

local SilentAimSettings = {
	Enabled = false,
	
	ClassName = "-",
	ToggleKey = "K",
	
	TeamCheck = false,
	VisibleCheck = false, 
	TargetPart = "Head",
	SilentAimMethod = "Raycast",
	
	FOVRadius = 360,
	FOVVisible = false,
	ShowSilentAimTarget = false, 
	
	MouseHitPrediction = false,
	MouseHitPredictionAmount = 1,
	HitChance = 100
}

-- variables
getgenv().SilentAimSettings = Settings
local MainFileName = "KakahMenuSilent"
local SelectedFile, FileToSave = "", ""

local Camera = workspace.CurrentCamera
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local GuiService = game:GetService("GuiService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local GetChildren = game.GetChildren
local GetPlayers = Players.GetPlayers
local WorldToScreen = Camera.WorldToScreenPoint
local WorldToViewportPoint = Camera.WorldToViewportPoint
local GetPartsObscuringTarget = Camera.GetPartsObscuringTarget
local FindFirstChild = game.FindFirstChild
local RenderStepped = RunService.RenderStepped
local GuiInset = GuiService.GetGuiInset
local GetMouseLocation = UserInputService.GetMouseLocation

local resume = coroutine.resume 
local create = coroutine.create

local ValidTargetParts = {"Head", "HumanoidRootPart"}
local PredictionAmount = 0.165

local mouse_box = Drawing.new("Square")
mouse_box.Visible = false 
mouse_box.ZIndex = 999 
mouse_box.Color = Color3.fromRGB(54, 57, 241)
mouse_box.Thickness = 20 
mouse_box.Size = Vector2.new(20, 20)
mouse_box.Filled = true 

local fov_circle = Drawing.new("Circle")
fov_circle.Thickness = 1
fov_circle.NumSides = 100
fov_circle.Radius = 180
fov_circle.Filled = false
fov_circle.Visible = false
fov_circle.ZIndex = 999
fov_circle.Transparency = 1
fov_circle.Color = Color3.fromRGB(54, 57, 241)

local ExpectedArguments = {
	FindPartOnRayWithIgnoreList = {
		ArgCountRequired = 3,
		Args = {
			"Instance", "Ray", "table", "boolean", "boolean"
		}
	},
	FindPartOnRayWithWhitelist = {
		ArgCountRequired = 3,
		Args = {
			"Instance", "Ray", "table", "boolean"
		}
	},
	FindPartOnRay = {
		ArgCountRequired = 2,
		Args = {
			"Instance", "Ray", "Instance", "boolean", "boolean"
		}
	},
	Raycast = {
		ArgCountRequired = 3,
		Args = {
			"Instance", "Vector3", "Vector3", "RaycastParams"
		}
	}
}

function CalculateChance(Percentage)
	-- // Floor the percentage
	Percentage = math.floor(Percentage)

	-- // Get the chance
	local chance = math.floor(Random.new().NextNumber(Random.new(), 0, 1) * 100) / 100

	-- // Return
	return chance <= Percentage / 100
end


--[[file handling]] do 
	if not isfolder(MainFileName) then 
		makefolder(MainFileName);
	end
	
	if not isfolder(string.format("%s/%s", MainFileName, tostring(game.PlaceId))) then 
		makefolder(string.format("%s/%s", MainFileName, tostring(game.PlaceId)))
	end
end

local Files = listfiles(string.format("%s/%s", "KakahMenuSilent", tostring(game.PlaceId)))

-- functions
local function GetFiles() -- credits to the linoria lib for this function, listfiles returns the files full path and its annoying
	local out = {}
	for i = 1, #Files do
		local file = Files[i]
		if file:sub(-4) == '.lua' then
			-- i hate this but it has to be done ...

			local pos = file:find('.lua', 1, true)
			local start = pos

			local char = file:sub(pos, pos)
			while char ~= '/' and char ~= '\\' and char ~= '' do
				pos = pos - 1
				char = file:sub(pos, pos)
			end

			if char == '/' or char == '\\' then
				table.insert(out, file:sub(pos + 1, start - 1))
			end
		end
	end
	
	return out
end

local function UpdateFile(FileName)
	assert(FileName or FileName == "string", "oopsies");
	writefile(string.format("%s/%s/%s.lua", MainFileName, tostring(game.PlaceId), FileName), HttpService:JSONEncode(SilentAimSettings))
end

local function LoadFile(FileName)
	assert(FileName or FileName == "string", "oopsies");
	
	local File = string.format("%s/%s/%s.lua", MainFileName, tostring(game.PlaceId), FileName)
	local ConfigData = HttpService:JSONDecode(readfile(File))
	for Index, Value in next, ConfigData do
		SilentAimSettings[Index] = Value
	end
end

local function getPositionOnScreen(Vector)
	local Vec3, OnScreen = WorldToScreen(Camera, Vector)
	return Vector2.new(Vec3.X, Vec3.Y), OnScreen
end

local function ValidateArguments(Args, RayMethod)
	local Matches = 0
	if #Args < RayMethod.ArgCountRequired then
		return false
	end
	for Pos, Argument in next, Args do
		if typeof(Argument) == RayMethod.Args[Pos] then
			Matches = Matches + 1
		end
	end
	return Matches >= RayMethod.ArgCountRequired
end

local function getDirection(Origin, Position)
	return (Position - Origin).Unit * 1000
end

local function getMousePosition()
	return GetMouseLocation(UserInputService)
end

local function IsPlayerVisible(Player)
	local PlayerCharacter = Player.Character
	local LocalPlayerCharacter = LocalPlayer.Character
	
	if not (PlayerCharacter or LocalPlayerCharacter) then return end 
	
	local PlayerRoot = FindFirstChild(PlayerCharacter, Options.TargetPart.Value) or FindFirstChild(PlayerCharacter, "HumanoidRootPart")
	
	if not PlayerRoot then return end 
	
	local CastPoints, IgnoreList = {PlayerRoot.Position, LocalPlayerCharacter, PlayerCharacter}, {LocalPlayerCharacter, PlayerCharacter}
	local ObscuringObjects = #GetPartsObscuringTarget(Camera, CastPoints, IgnoreList)
	
	return ((ObscuringObjects == 0 and true) or (ObscuringObjects > 0 and false))
end

local function getClosestPlayer()
	if not Options.TargetPart.Value then return end
	local Closest
	local DistanceToMouse
	for _, Player in next, GetPlayers(Players) do
		if Player == LocalPlayer then continue end
		if Toggles.TeamCheck.Value and Player.Team == LocalPlayer.Team then continue end

		local Character = Player.Character
		if not Character then continue end
		
		if Toggles.VisibleCheck.Value and not IsPlayerVisible(Player) then continue end

		local HumanoidRootPart = FindFirstChild(Character, "HumanoidRootPart")
		local Humanoid = FindFirstChild(Character, "Humanoid")
		if not HumanoidRootPart or not Humanoid or Humanoid and Humanoid.Health <= 0 then continue end

		local ScreenPosition, OnScreen = getPositionOnScreen(HumanoidRootPart.Position)
		if not OnScreen then continue end

		local Distance = (getMousePosition() - ScreenPosition).Magnitude
		if Distance <= (DistanceToMouse or Options.Radius.Value or 2000) then
			Closest = ((Options.TargetPart.Value == "Random" and Character[ValidTargetParts[math.random(1, #ValidTargetParts)]]) or Character[Options.TargetPart.Value])
			DistanceToMouse = Distance
		end
	end
	return Closest
end
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/Jxereas/UI-Libraries/main/notification_gui_library.lua", true))()

-- Notification.new("error", "Error Heading", "Error body message.") 
-- Notification.new("success", "Success Heading", "Success body message.")
-- Notification.new("info", "Information Heading", "Information body message.")
-- Notification.new("warning", "Warning Heading", "Warning body message.") 
-- Notification.new("message", "Message Heading", "Message body message.") 
	

					-- \\ Combat Box //
					local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'
					local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
					local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
					local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
					-- \\ Window //
					local Window = Library:CreateWindow({
						Title = 'Kakah Menu Paid - ACS 2.0.1',
						Center = true, 
						AutoShow = true,
					})

					local CombatTab = Window:AddTab("Combat")
					local silent = CombatTab:AddLeftTabbox("Silent Options") do
						local silent = silent:AddTab("Silent Options")
						
						silent:AddToggle("aim_Enabled", {Text = "Enable Silent Aim"}):AddKeyPicker("aim_Enabled_KeyPicker", {Default = "K", SyncToggleState = true, Mode = "Toggle", Text = "Enabled", NoUI = false});
						Options.aim_Enabled_KeyPicker:OnClick(function()
							SilentAimSettings.Enabled = not SilentAimSettings.Enabled
							
							Toggles.aim_Enabled.Value = SilentAimSettings.Enabled
							Toggles.aim_Enabled:SetValue(SilentAimSettings.Enabled)
							
							mouse_box.Visible = SilentAimSettings.Enabled
						end)
						
						silent:AddToggle("TeamCheck", {Text = "Team Check", Default = SilentAimSettings.TeamCheck}):OnChanged(function()
							SilentAimSettings.TeamCheck = Toggles.TeamCheck.Value
						end)
						silent:AddToggle("VisibleCheck", {Text = "Visible Check", Default = SilentAimSettings.VisibleCheck}):OnChanged(function()
							SilentAimSettings.VisibleCheck = Toggles.VisibleCheck.Value
						end)
						silent:AddDropdown("TargetPart", {Text = "Target", Default = SilentAimSettings.TargetPart, Values = {"Head", "HumanoidRootPart", "Random"}}):OnChanged(function()
							SilentAimSettings.TargetPart = Options.TargetPart.Value
						end)
	
						silent:AddSlider('HitChance', {
							Text = 'Hit chance',
							Default = 100,
							Min = 0,
							Max = 100,
							Rounding = 1,
						
							Compact = false,
						})
						Options.HitChance:OnChanged(function()
							SilentAimSettings.HitChance = Options.HitChance.Value
						end)
					end
	
					local ShowFOV = CombatTab:AddLeftTabbox("FOV") do
						local FOV = ShowFOV:AddTab("FOV")

						FOV:AddToggle("Visible", {Text = "Show FOV Circle"}):AddColorPicker("Color", {Default = Color3.fromRGB(54, 57, 241)}):OnChanged(function()
							fov_circle.Visible = Toggles.Visible.Value
							SilentAimSettings.FOVVisible = Toggles.Visible.Value
						end)
						FOV:AddSlider("Radius", {Text = "FOV Radius", Min = 0, Max = 360, Default = 130, Rounding = 0}):OnChanged(function()
							fov_circle.Radius = Options.Radius.Value
							SilentAimSettings.FOVRadius = Options.Radius.Value
						end)
						FOV:AddToggle("MousePosition", {Text = "Aim Target"}):AddColorPicker("MouseVisualizeColor", {Default = Color3.fromRGB(54, 57, 241)}):OnChanged(function()
							mouse_box.Visible = Toggles.MousePosition.Value 
							SilentAimSettings.ShowSilentAimTarget = Toggles.MousePosition.Value 
						end)
					end

	-- \\ Tabs //
	local GameTab = {Game = Window:AddTab('Guns Editor')}
	local VisualsTab = {Visual = Window:AddTab('Visuals')}
	local PlayerTab = {Player = Window:AddTab('Player')}
	local TrollTab = {Troll = Window:AddTab('Troll')}
	local SettingsTab = {Settings = Window:AddTab('Settings')}
	-- \\ Box //
	local GunMod = GameTab.Game:AddLeftGroupbox('Gun Modifications')
	local GunCustom = GameTab.Game:AddRightGroupbox('Gun Customize')
	local CharacterTab = PlayerTab.Player:AddLeftGroupbox('Character')
	local EspBox = VisualsTab.Visual:AddLeftGroupbox('ESP')
	local CombatVisuals = VisualsTab.Visual:AddRightGroupbox('Combat Visuals')
	local MenuBox = VisualsTab.Visual:AddLeftGroupbox('Menu Visuals')
	local CrosshairBox = VisualsTab.Visual:AddRightGroupbox('Crosshair')
	local ServerTab = TrollTab.Troll:AddLeftGroupbox('Server')
	local PlayersTab = TrollTab.Troll:AddRightGroupbox('Players')
	local MenuSettingsBox = SettingsTab.Settings:AddLeftGroupbox('Menu Settings')
	local MiscBox = SettingsTab.Settings:AddRightGroupbox('Misc')

	Library:SetWatermark('Kakah Menu Paid - ACS 2.0.1 - '..game.PlaceId)
	wait(0.5)
	Library:SetWatermarkVisibility(true)


-- Initial Script

-- Combat Box
GunMod:AddLabel('Only ACS - 2.0.1')
local InfAmmoButton = GunMod:AddButton("Inf Ammo", function()
	for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
		if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
			if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
				MOD = v.Parent["TGIRoleplay_Settings"];
				SCRIPTMOD = require(MOD);
				SCRIPTMOD.Ammo = math.huge;
				SCRIPTMOD.AmmoInGun = math.huge;
				SCRIPTMOD.StoredAmmo = math.huge;
				SCRIPTMOD.MaxStoredAmmo = math.huge;
			else
				MOD = v.Parent["ACS_Settings"];
				SCRIPTMOD = require(MOD);
				SCRIPTMOD.Ammo = math.huge;
				SCRIPTMOD.AmmoInGun = math.huge;
				SCRIPTMOD.StoredAmmo = math.huge;
				SCRIPTMOD.MaxStoredAmmo = math.huge;
			end
		end
	end
end)
local NoSpreadButton = GunMod:AddButton("No Spread", function()
	for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
		if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
			if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
				MOD = v.Parent["TGIRoleplay_Settings"];
				SCRIPTMOD = require(MOD);
				SCRIPTMOD.MinSpread = 0.00001;
				SCRIPTMOD.MaxSpread = 0.00002;
			else
				MOD = v.Parent["ACS_Settings"];
				SCRIPTMOD = require(MOD);
				SCRIPTMOD.MinSpread = 0.00001;
				SCRIPTMOD.MaxSpread = 0.00002;
			end
		end
	end
end)
local NoRecoilButton = GunMod:AddButton("No Recoil", function()
	for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
		if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
			if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
				MOD = v.Parent["TGIRoleplay_Settings"];
				SCRIPTMOD = require(MOD);
				--cam
				SCRIPTMOD.camRecoil.camRecoilUp = {0,0};
				SCRIPTMOD.camRecoil.camRecoilTilt = {0,0};
				SCRIPTMOD.camRecoil.camRecoilLeft = {0,0};
				SCRIPTMOD.camRecoil.camRecoilRight = {0,0};
				--gun
				SCRIPTMOD.gunRecoil.gunRecoilUp = {0,0};
				SCRIPTMOD.gunRecoil.gunRecoilTilt = {0,0};
				SCRIPTMOD.gunRecoil.gunRecoilLeft = {0,0};
				SCRIPTMOD.gunRecoil.gunRecoilRight = {0,0};
			else
				MOD = v.Parent["ACS_Settings"];
				SCRIPTMOD = require(MOD);
				--cam
				SCRIPTMOD.camRecoil.camRecoilUp = {0,0};
				SCRIPTMOD.camRecoil.camRecoilTilt = {0,0};
				SCRIPTMOD.camRecoil.camRecoilLeft = {0,0};
				SCRIPTMOD.camRecoil.camRecoilRight = {0,0};
				--gun
				SCRIPTMOD.gunRecoil.gunRecoilUp = {0,0};
				SCRIPTMOD.gunRecoil.gunRecoilTilt = {0,0};
				SCRIPTMOD.gunRecoil.gunRecoilLeft = {0,0};
				SCRIPTMOD.gunRecoil.gunRecoilRight = {0,0};
			end
		end
	end
end)
local NoBulletDropButton = GunMod:AddButton("No Bullet Drop", function()
	for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
		if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
			if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
				MOD = v.Parent["TGIRoleplay_Settings"];
				SCRIPTMOD = require(MOD);
				SCRIPTMOD.BulletDrop= 0
			else
				MOD = v.Parent["ACS_Settings"];
				SCRIPTMOD = require(MOD);
				SCRIPTMOD.BulletDrop= 0
			end
		end
	end
end)

GunMod:AddToggle('eantibreak', {Text = 'Anti Break',Default = false, Tooltip = 'Enable anti break gun',})
Toggles.eantibreak:OnChanged(function()
	for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
		if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
			if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
				MOD = v.Parent["TGIRoleplay_Settings"];
				SCRIPTMOD = require(MOD);
				SCRIPTMOD.CanBreak = Toggles.eantibreak.Value;
			else
				MOD = v.Parent["ACS_Settings"];
				SCRIPTMOD = require(MOD);
				SCRIPTMOD.CanBreak = Toggles.eantibreak.Value;
			end
		end
	end
end)
GunMod:AddSlider('DamageSlider', {Text = 'Change Damage', Default = 5, Min = 5, Max = 500, Rounding = 1, Compact = false,})
Options.DamageSlider:OnChanged(function()
	for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
		if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
			if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
				MOD = v.Parent["TGIRoleplay_Settings"];
				SCRIPTMOD = require(MOD);
				SCRIPTMOD.MinDamage = Options.DamageSlider.Value
			else
				MOD = v.Parent["ACS_Settings"];
				SCRIPTMOD = require(MOD);
				SCRIPTMOD.MinDamage = Options.DamageSlider.Value
			end
		end
	end
end)
GunMod:AddDropdown('FireModeDrop', {Values = {"",'Auto', 'Burst', 'Semi'}, Default = 1, Multi = false, Text = 'Select Mode:', Tooltip = 'Change gun fire mode',})
Options.FireModeDrop:OnChanged(function()
	if Options.FireModeDrop.Value=="Auto" then
		for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
			if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
				if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
					MOD = v.Parent["TGIRoleplay_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.ShootType = 3
				else
					MOD = v.Parent["ACS_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.ShootType = 3
				end
			end
		end
	elseif Options.FireModeDrop.Value=="Burst" then
		for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
			if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
				if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
					MOD = v.Parent["TGIRoleplay_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.ShootType = 2
				else
					MOD = v.Parent["ACS_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.ShootType = 2
				end
			end
		end
	elseif Options.FireModeDrop.Value=="Semi" then
		for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
			if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
				if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
					MOD = v.Parent["TGIRoleplay_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.ShootType = 1
				else
					MOD = v.Parent["ACS_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.ShootType = 1
				end
			end
		end
	end
end)
GunMod:AddInput('BurstFireModeAmount', {
	Default = "3",
	Numeric = true,
	Finished = false,

	Text = 'Burst FireMode - Edit Bullets Amount',
	Tooltip = 'Change the amount of bullets per burst.',

	Placeholder = 'Ex: 10',
})
Options.BurstFireModeAmount:OnChanged(function()
	for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
		if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
			if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
				MOD = v.Parent["TGIRoleplay_Settings"];
				SCRIPTMOD = require(MOD);
				SCRIPTMOD.BurstShot = Options.BurstFireModeAmount.Value
			else
				MOD = v.Parent["ACS_Settings"];
				SCRIPTMOD = require(MOD);
				SCRIPTMOD.BurstShot = Options.BurstFireModeAmount.Value
			end
		end
	end
end)


-- Gun Custom
GunCustom:AddDropdown('SelectGunDrop', {Values = GUNS, Default = 1, Multi = false, Text = 'Select Gun:', Tooltip = 'Select gun to customize',})
GunCustom:AddDropdown('AttachScopeDrop', {Values = {"","Acog","TA33 Acog", "PM II"}, Default = 1, Multi = false, Text = 'Attach Scope', Tooltip = 'Scope in '..Options.SelectGunDrop.Value,})
Options.AttachScopeDrop:OnChanged(function()
		if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
			MOD = game:GetService("Players").LocalPlayer.Backpack[Options.SelectGunDrop.Value]["TGIRoleplay_Settings"];
			else
			MOD = game:GetService("Players").LocalPlayer.Backpack[Options.SelectGunDrop.Value]["ACS_Settings"];
			end
		SCRIPTMOD = require(MOD);
		SCRIPTMOD.SightAtt = "";
		SCRIPTMOD.SightAtt = Options.AttachScopeDrop.Value;
end)
GunCustom:AddDropdown('AttachBarrelDrop', {Values = {"","Suppressor","Flash Hider"}, Default = 1, Multi = false, Text = 'Attach Barrel', Tooltip = 'Barrel in '..Options.SelectGunDrop.Value,})
Options.AttachScopeDrop:OnChanged(function()
		if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
			MOD = game:GetService("Players").LocalPlayer.Backpack[Options.SelectGunDrop.Value]["TGIRoleplay_Settings"];
			else
			MOD = game:GetService("Players").LocalPlayer.Backpack[Options.SelectGunDrop.Value]["ACS_Settings"];
			end
		SCRIPTMOD = require(MOD);
		SCRIPTMOD.SightAtt = "";
		SCRIPTMOD.SightAtt = Options.AttachBarrelDrop.Value;
end)
GunCustom:AddDropdown('AttachOthersUtiliesDrop', {Values = {"","Laser","Bipod", "AN PEQ"}, Default = 1, Multi = false, Text = 'Attach Others Utilies', Tooltip = 'Others utilies in '..Options.SelectGunDrop.Value,})
Options.AttachScopeDrop:OnChanged(function()
		if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
			MOD = game:GetService("Players").LocalPlayer.Backpack[Options.SelectGunDrop.Value]["TGIRoleplay_Settings"];
			else
			MOD = game:GetService("Players").LocalPlayer.Backpack[Options.SelectGunDrop.Value]["ACS_Settings"];
			end
		SCRIPTMOD = require(MOD);
		SCRIPTMOD.SightAtt = "";
		SCRIPTMOD.SightAtt = Options.AttachOthersUtiliesDrop.Value;
end)

GunCustom:AddButton("Unequip all utilities", function()
	if game.PlaceId==9483667454 or 6911111094 then
		MOD = game:GetService("Players").LocalPlayer.Backpack[Options.SelectGunDrop.Value]["TGIRoleplay_Settings"];
		else
		MOD = game:GetService("Players").LocalPlayer.Backpack[Options.SelectGunDrop.Value]["ACS_Settings"];
		end
	SCRIPTMOD = require(MOD);
	SCRIPTMOD.SightAtt = "";
	SCRIPTMOD.BarrelAtt = "";
	SCRIPTMOD.OtherAtt = "";
end)

-- Visuals

MenuBox:AddToggle('WatermarkMenutoggle', {Text = 'Watermark', Default = true, Tooltip = 'Disable/Enable watermark.',})
Toggles.WatermarkMenutoggle:OnChanged(function()
	Library:SetWatermarkVisibility(Toggles.WatermarkMenutoggle.Value)
end)

local ESPLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Sirius/request/library/esp/esp.lua'),true))()
ESPLib.whitelist = {}
ESPLib.blacklist = {}

EspBox:AddToggle('TeamESPtoggle', {Text = 'Team Check', Default = false, Tooltip = 'Check Team.',})
Toggles.TeamESPtoggle:OnChanged(function()
	ESPLib.options.teamCheck = Toggles.TeamESPtoggle.Value
end)
EspBox:AddToggle('TeamColorESPtoggle', {Text = 'Team Color', Default = false, Tooltip = 'Use Team Color.',})
Toggles.TeamColorESPtoggle:OnChanged(function()
	ESPLib.options.teamColor = Toggles.TeamColorESPtoggle.Value
end)
EspBox:AddLabel('ESP Color'):AddColorPicker('ESPColorPicker', {Default = Color3.fromRGB(37, 98, 255),})
Options.ESPColorPicker:OnChanged(function()
	ESPLib.options.whitelistColor = Options.ESPColorPicker.Value
	ESPLib.options.outOfViewArrowsColor = Options.ESPColorPicker.Value
	ESPLib.options.outOfViewArrowsOutlineColor = Options.ESPColorPicker.Value
	ESPLib.options.nameColor = Options.ESPColorPicker.Value
	ESPLib.options.boxesColor = Options.ESPColorPicker.Value
	ESPLib.options.boxFillColor = Options.ESPColorPicker.Value
	ESPLib.options.healthBarsColor = Options.ESPColorPicker.Value
	ESPLib.options.healthTextColor = Options.ESPColorPicker.Value
	ESPLib.options.distanceColor = Options.ESPColorPicker.Value
	ESPLib.options.tracerColor = Options.ESPColorPicker.Value
	ESPLib.options.chamsFillColor = Options.ESPColorPicker.Value
end)
EspBox:AddToggle('VisibleESPtoggle', {Text = 'Visibles Only', Default = false, Tooltip = 'Only show visible players.',})
Toggles.VisibleESPtoggle:OnChanged(function()
	ESPLib.options.visible = Toggles.VisibleESPtoggle.Value
end)
EspBox:AddToggle('namesESPtoggle', {Text = 'Names', Default = false, Tooltip = 'Show players names.',})
Toggles.namesESPtoggle:OnChanged(function()
	ESPLib.options.names = Toggles.namesESPtoggle.Value
end)
EspBox:AddToggle('outOfViewArrowsESPtoggle', {Text = 'Arrows', Default = false, Tooltip = 'Show out view arrows.',})
Toggles.outOfViewArrowsESPtoggle:OnChanged(function()
	ESPLib.options.outOfViewArrows = Toggles.outOfViewArrowsESPtoggle.Value
	ESPLib.options.outOfViewArrowsFilled = Toggles.outOfViewArrowsESPtoggle.Value
	ESPLib.options.outOfViewArrowsOutline  = Toggles.outOfViewArrowsESPtoggle.Value
end)
EspBox:AddToggle('distanceESPtoggle', {Text = 'Distance', Default = false, Tooltip = 'Show distance in studs.',})
Toggles.distanceESPtoggle:OnChanged(function()
	ESPLib.options.distance = Toggles.distanceESPtoggle.Value
end)
EspBox:AddToggle('healthBarsESPtoggle', {Text = 'Healthbar', Default = false, Tooltip = 'Show players life.',})
Toggles.healthBarsESPtoggle:OnChanged(function()
	ESPLib.options.healthBars = Toggles.healthBarsESPtoggle.Value
end)
EspBox:AddToggle('healthTextESPtoggle', {Text = 'Healthbar Text', Default = false, Tooltip = 'Show players life.',})
Toggles.healthTextESPtoggle:OnChanged(function()
	ESPLib.options.healthText = Toggles.healthTextESPtoggle.Value
end)
EspBox:AddToggle('boxesESPtoggle', {Text = 'Boxes', Default = false, Tooltip = 'Show Boxes.',})
Toggles.boxesESPtoggle:OnChanged(function()
	ESPLib.options.boxes = Toggles.boxesESPtoggle.Value
end)
EspBox:AddDropdown('tracerOriginDrop', {
	Values = {"Bottom", "Top", "Mouse"},
	Default = 1,
	Multi = false,

	Text = 'Tracers Origin:',
	Tooltip = '',
})
Options.tracerOriginDrop:OnChanged(function(bool)
	ESPLib.options.tracerOrigin = Options.tracerOriginDrop.Value
end)
EspBox:AddToggle('tracersESPtoggle', {Text = 'Tracers', Default = false, Tooltip = 'Show Tracers in player.',})
Toggles.tracersESPtoggle:OnChanged(function(bool)
	ESPLib.options.tracers = Toggles.tracersESPtoggle.Value
end)
EspBox:AddDivider()
EspBox:AddToggle('ESPtoggle', {Text = 'Enable ESP', Default = false, Tooltip = 'Active the ESP.',})
Toggles.ESPtoggle:OnChanged(function(bool)
	ESPLib.options.enabled = Toggles.ESPtoggle.Value
	if ESPLib.options.enabled==true then
		ESPLib.Init()
	elseif ESPLib.options.enabled==false then
		ESPLib.Unload()
	end
end)
local arm = game:GetService("ReplicatedStorage")["ACS_Engine"].ArmModel.Arms["Left Arm"]
CombatVisuals:AddToggle('WeaponModel', {Text = 'Gun Model',Default = false,Tooltip = 'Enable Gun Model/Change Model Color',}):AddColorPicker('CoisarPicker', {Default = Color3.fromRGB(27, 42, 53),})
Toggles.WeaponModel:OnChanged(function()
	g = Toggles.WeaponModel.Values
end)
Options.CoisarPicker:OnChanged(function()
	local g = Toggles.WeaponModel.Value
	if g==true then
		for i, v in pairs(game:GetService("ReplicatedStorage")["ACS_Engine"].GunModels:GetDescendants()) do
			if v.ClassName=='Part' or v.ClassName=='UnionOperation'then
				v.Color=Options.CoisarPicker.Value
				wait()
			end
		end
	end
end)
CombatVisuals:AddDropdown('WeaponMaterialDrop', {Values = {'SmoothPlastic', 'Wood', 'Slate', 'Concrete', 'CorrodedMetal', 'DiamondPlate', 'Foil', 'Grass', 'Ice', 'Marble', 'Granite', 'Brick', 'Pebble', 'Sand', 'Fabric', 'Plastic', 'Metal', 'WoodPlanks', 'Cobblestone', 'Air', 'Water', 'Rock', 'Glacier', 'Snow', 'Sandstone', 'Mud', 'Basalt', 'Ground', 'CrackedLava', 'Neon', 'Glass', 'Asphalt', 'LeafyGrass', 'Salt', 'Limestone', 'Pavement', 'ForceField'}, Default = 1, Multi = false, Text = 'Weapon Material:', Tooltip = 'Change Weapon Model Material.',})
Options.WeaponMaterialDrop:OnChanged(function()
	h=Options.WeaponMaterialDrop.Value
	local g = true
	if g==true then
		for i, v in pairs(game:GetService("ReplicatedStorage")["ACS_Engine"].GunModels:GetDescendants()) do
			if v.ClassName=='Part' or v.ClassName=='UnionOperation'then
				v.Material=Options.WeaponMaterialDrop.Value
				wait()
			end
		end
	end
end)
CombatVisuals:AddToggle('ArmModel', {Text = 'Arm Model',Default = false,Tooltip = 'Enable Arm Model/Change Model Color',})
Toggles.ArmModel:OnChanged(function()
	gsja = Toggles.ArmModel.Value
end)
CombatVisuals:AddDropdown('ArmMaterialDrop', {Values = {'SmoothPlastic', 'ForceField'}, Default = 1, Multi = false, Text = 'Arm Material:', Tooltip = 'Change Arm Model Material.',})
Options.ArmMaterialDrop:OnChanged(function()
	h=Options.ArmMaterialDrop.Value
	if gsja==true then
	game:GetService("ReplicatedStorage")["ACS_Engine"].ArmModel.Arms["Left Arm"].Material=h
	game:GetService("ReplicatedStorage")["ACS_Engine"].ArmModel.Arms["Right Arm"].Material=h
	end
end)
CombatVisuals:AddToggle('HideLeftArm', {Text = 'Hide Left Arm',Default = false, Tooltip = 'Hide Left Arm',})
Toggles.HideLeftArm:OnChanged(function()
	a = Toggles.HideLeftArm.Value
	if a==false then
		arm.Transparency = 0
	elseif a==true then
		arm.Transparency = 1
	end
end)
CrosshairBox:AddToggle('EnableCrossair', {Text = 'Enable CrossHair',Default = false, Tooltip = 'Hide/Show Crosshair',})
Toggles.EnableCrossair:OnChanged(function()
	for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
		if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
			if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
				MOD = v.Parent["TGIRoleplay_Settings"];
				SCRIPTMOD = require(MOD);
				SCRIPTMOD.CrossHair= Toggles.EnableCrossair.Value
				SCRIPTMOD.CenterDot = Toggles.EnableCrossair.Value
			else
				MOD = v.Parent["ACS_Settings"];
				SCRIPTMOD = require(MOD);
				SCRIPTMOD.CrossHair = Toggles.EnableCrossair.Value
				SCRIPTMOD.CenterDot = Toggles.EnableCrossair.Value
			end
		end
	end
end)

-- Character Tab

local modcharacter = GETV.GameRules.Config
local requiredc = require(modcharacter);

CharacterTab:AddSlider('RunWalkSlider', {Text = 'Change Run WalkSpeed',Default = 24,Min = 0,Max = 500,Rounding = 1,Compact = false,})
CharacterTab:AddSlider('CrouchWalkSlider', {Text = 'Change Run WalkSpeed',Default = 24,Min = 0,Max = 500,Rounding = 1,Compact = false,})
CharacterTab:AddSlider('JumpSlider', {Text = 'Change JumpPower',Default = 50,Min = 0,Max = 500,Rounding = 1,Compact = false,})
CharacterTab:AddSlider('FOVSlider', {Text = 'Change Field Of View',Default = 70,Min = 70,Max = 120,Rounding = 1,Compact = false,})
CharacterTab:AddSlider('GravitySlider', {Text = 'Change Gravity',Default = 192,Min = 0,Max = 1000,Rounding = 1,Compact = false,})
CharacterTab:AddSlider('WorldTime', {Text = 'Change World Time',Default = 12,Min = 0,Max = 23,Rounding = 1,Compact = false,})
Options.WorldTime:OnChanged(function()
	game.Lighting.ClockTime = Options.WorldTime.Value
end)
Options.RunWalkSlider:OnChanged(function()
	requiredc.RunWalkSpeed = Options.RunWalkSlider.Value
end)
Options.CrouchWalkSlider:OnChanged(function()
	requiredc.CrouchWalkSpeed = Options.CrouchWalkSlider.Value
end)
Options.JumpSlider:OnChanged(function()
	game.Players.LocalPlayer.Character.Humanoid.JumpPower = Options.JumpSlider.Value
end)
Options.FOVSlider:OnChanged(function()
	game.Workspace.Camera.FieldOfView = Options.FOVSlider.Value
end)
Options.GravitySlider:OnChanged(function()
	game.Workspace.Gravity = Options.GravitySlider.Value
end)
local ResetSliderButton = CharacterTab:AddButton('Reset Changes', function()
	Options.RunWalkSlider:SetValue(16)
	requiredc.CrouchWalkSpeed = 24
	Options.CrouchWalkSlider:SetValue(16)
	requiredc.CrouchWalkSpeed = 6
	Options.JumpSlider:SetValue(50)
	game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
	Options.FOVSlider:SetValue(70)
	game.Workspace.Camera.FieldOfView = 70
	Options.GravitySlider:SetValue(192)
	game.Workspace.Gravity = 192
	Options.WorldTime:SetValue(12)
	game.Lighting.ClockTime = 12
end)
CharacterTab:AddToggle('ResetBind', {Text = 'Reset Keybind', Default = false, Tooltip = 'Enable Reset Bind.',}):AddKeyPicker('ResetBind', { Default = 'R', NoUI = true, Text = 'Menu keybind' })
Options.ResetBind:OnClick(function()
	local rbind = Toggles.ResetBind.Value
	if rbind==true then
	game.Players.LocalPlayer.Character.Humanoid.Health = 0
	end
end)
CharacterTab:AddToggle('InfStaminaToggle', {Text = 'Infinite Stamina', Default = false, Tooltip = 'Enable Infinite Stamina.',})
CharacterTab:AddToggle('NoJumpCooldownToggle', {Text = 'Remove JumpCooldown', Default = false, Tooltip = 'Enable No JumpCooldown.',})
CharacterTab:AddToggle('NoFallDamageToggle', {Text = 'Remove FallDamage', Default = false, Tooltip = 'Enable No FallDamage.',})
CharacterTab:AddToggle('AntiDrownToggle', {Text = 'Anti Drown', Default = false, Tooltip = 'Enable No Drown.',})
CharacterTab:AddToggle('BunnyHopToggle', {Text = 'BunnyHob', Default = false, Tooltip = 'Enable BunnyHob.',})
Toggles.InfStaminaToggle:OnChanged(function()
	if requiredc.EnableStamina == true then
		requiredc.EnableStamina = false;
	else
		requiredc.EnableStamina = true
	end
end)
local OLDJUMP = requiredc.JumpCoolDown
Toggles.NoJumpCooldownToggle:OnChanged(function()
	if requiredc.JumpCoolDown ~= 0 then
		requiredc.JumpCoolDown = 0;
	else
		requiredc.JumpCoolDown = OLDJUMP
	end
end)
Toggles.NoFallDamageToggle:OnChanged(function()
	if requiredc.EnableFallDamage == true then
		requiredc.EnableFallDamage = false;
	else
		requiredc.EnableFallDamage = true
	end
end)
Toggles.AntiDrownToggle:OnChanged(function()
	if requiredc.CanDrown == true then
		requiredc.CanDrown = false;
	else
		requiredc.CanDrown = true
	end
end)
Toggles.BunnyHopToggle:OnChanged(function()
	if requiredc.AntiBunnyHop == true then
		requiredc.AntiBunnyHop = false;
	else
		requiredc.AntiBunnyHop = true
	end
end)
-- Troll

-- // Server
local CrashServerButton = ServerTab:AddButton("Crash Server", function(bool)

		while true do
			for i=1,10 do
				GETV.Events.ServerBullet:FireServer(Vector3.new(0/0/0),Vector3.new(0/0/0))
			end
			task.wait()
		 end

end)
local LagServerButton = ServerTab:AddButton("Lag Server", function(bool)

		GETV.Events.ServerBullet:FireServer(Vector3.new(0/0/0),Vector3.new(0/0/0))

end)
ServerTab:AddToggle('WhizzSERVERToggle', {Text = 'Loop Whizz Server', Default = false, Tooltip = 'Enable Whizz Server.',})
ServerTab:AddToggle('SupressSERVERToggle', {Text = 'Loop Supress Server', Default = false, Tooltip = 'Enable Supress Server.',})
Toggles.WhizzSERVERToggle:OnChanged(function()
	while Toggles.WhizzSERVERToggle.Value==true do task.wait(0.1)
		for i, player in pairs(game.Players:GetPlayers()) do
			GETV.Events.Whizz:FireServer(player)
		end
	end
end)
Toggles.SupressSERVERToggle:OnChanged(function()
	while Toggles.SupressSERVERToggle.Value==true do task.wait(0.1)
		for i, player in pairs(game.Players:GetPlayers()) do
			local ohInstance1 = player
			local ohNumber2 = 1
			GETV.Events.Suppression:FireServer(ohInstance1, ohNumber2)
		end
	end
end)
-- // Players
PLR = {}
for i, v in pairs(game.Players:GetPlayers()) do
	if v.Name ~= game.Players.LocalPlayer.Name then
		table.insert(PLR, v.Name) 
	end
end

PlayersTab:AddDropdown('SelectPlrDrop', {Values = PLR, Default = 1, Multi = false, Text = 'Select Player:', Tooltip = 'Select player to troll',})
PlayersTab:AddToggle('WhizzPLRToggle', {Text = 'Loop Whizz Player', Default = false, Tooltip = 'Enable Whizz Player.',})
PlayersTab:AddToggle('SupressPLRToggle', {Text = 'Loop Supress Player', Default = false, Tooltip = 'Enable Supress Player.',})
Toggles.WhizzPLRToggle:OnChanged(function()
	while Toggles.WhizzPLRToggle.Value==true do task.wait(0.1)
		while Toggles.SupressSERVERToggle.Value==true do task.wait(0.05)
			local args = {[1] = game:GetService("Players")[Options.SelectPlrDrop.Value]}
			GETV.Events.Whizz:FireServer(unpack(args))
		end
	end
end)
Toggles.SupressPLRToggle:OnChanged(function()
	while Toggles.SupressSERVERToggle.Value==true do task.wait(0.05)
		local ohInstance1 = game:GetService("Players")[Options.SelectPlrDrop.Value]
		local ohNumber2 = 1
		GETV.Events.Suppression:FireServer(ohInstance1, ohNumber2)
	end
end)


-- Settings
Library:OnUnload(function()
	print('Unloaded!')
	Library.Unloaded = true
end)

MenuSettingsBox:AddButton('Unload', function() Library:Unload() end)
MenuSettingsBox:AddLabel('Toggle Menu Keybind'):AddKeyPicker('MenuKeybind', { Default = 'RightShift', NoUI = false, Text = 'Menu keybind', Mode = "Always" })
MiscBox:AddLabel('Username: '.. game.Players.LocalPlayer.Name)
MiscBox:AddLabel('UserID: '.. game.Players.LocalPlayer.UserId)
MiscBox:AddLabel('Exploit: '..identifyexecutor())
MiscBox:AddLabel('PlaceID: '..game.PlaceId)
local RejoinButton = MiscBox:AddButton('Rejoin Game', function()
	game:GetService("TeleportService"):Teleport(game.PlaceId, player)
end)
Library.ToggleKeybind = Options.MenuKeybind


-- End Scripts

resume(create(function()
	RenderStepped:Connect(function()
		if  Toggles.MousePosition.Value and Toggles.aim_Enabled.Value  then
			if getClosestPlayer() then 
				local Root = getClosestPlayer().Parent.PrimaryPart or getClosestPlayer()
				local RootToViewportPoint, IsOnScreen = WorldToViewportPoint(Camera, Root.Position);

				mouse_box.Visible = IsOnScreen
				mouse_box.Position = Vector2.new(RootToViewportPoint.X, RootToViewportPoint.Y)
			else 
				mouse_box.Visible = false 
				mouse_box.Position = Vector2.new()
			end
		end
		
		if Toggles.Visible.Value then 
			fov_circle.Visible = Toggles.Visible.Value
			fov_circle.Color = Options.Color.Value
			fov_circle.Position = getMousePosition()
		end
	end)
end))

-- hooks
local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", newcclosure(function(...)
    local Method = getnamecallmethod()
    local Arguments = {...}
    local self = Arguments[1]
    local chance = CalculateChance(SilentAimSettings.HitChance)
    if Toggles.aim_Enabled.Value and self == workspace and not checkcaller() and chance == true then
		if ValidateArguments(Arguments, ExpectedArguments.Raycast) then
			local A_Origin = Arguments[2]

			local HitPart = getClosestPlayer()
			if HitPart then
				Arguments[3] = getDirection(A_Origin, HitPart.Position)

				return oldNamecall(unpack(Arguments))
			end
		end
	end
    return oldNamecall(...)
end))
OptionsMethodValue = false
local oldIndex = nil 
oldIndex = hookmetamethod(game, "__index", newcclosure(function(self, Index)
    if self == Mouse and not checkcaller() and Toggles.aim_Enabled.Value and OptionsMethodValue == true and getClosestPlayer() then
        local HitPart = getClosestPlayer()
         
        if Index == "Target" or Index == "target" then 
            return HitPart
        elseif Index == "Hit" or Index == "hit" then 
            return ((Toggles.Prediction.Value and (HitPart.CFrame + (HitPart.Velocity * PredictionAmount))) or (not Toggles.Prediction.Value and HitPart.CFrame))
        elseif Index == "X" or Index == "x" then 
            return self.X 
        elseif Index == "Y" or Index == "y" then 
            return self.Y 
        elseif Index == "UnitRay" then 
            return Ray.new(self.Origin, (self.Hit - self.Origin).Unit)
        end
    end

    return oldIndex(self, Index)
end))
   -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
   Name = "Kakah Menu V6",
   Callback = function()
      local GUNS = {}
function getGun()
	for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
		if v:IsA('ModuleScript') and "ACS_Animations" or "TGIRoleplay_Settings" then
			return "ACS Normal"
		else
			return "Possible ACS Guns"
		end
	end
end
local roleplaysettings = getGun()
print(tostring(roleplaysettings))
if roleplaysettings=="ACS Normal"then
	for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
		if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
			table.insert(GUNS, v.Parent.Name) 
		end
	end
elseif roleplaysettings=="Possible ACS Guns" then
	game.StarterGui:SetCore("SendNotification", {Title = "Aviso!"; Text = "NÃ£o foi detectado um sistema ACS neste jogo."; Icon = "rbxassetid://10455493610"; Duration = 5;})
end


function getACSVersion()
	for i, v in pairs(game:GetService("ReplicatedStorage"):GetDescendants()) do
		if v:IsA('Configuration') and v.Name~="Framework" then
			if (v:FindFirstChild('GameRules')) then
				return "ACS 2.0.1"
			elseif (v:FindFirstChild('Config')) then
				return "ACS 1.7 Sequence"
			else
				return "VERSION NOT SUPPORTED"
			end
		end
	end
end
local VERSIONACS = getACSVersion()
print(tostring(VERSIONACS))

function getConfig()
	for i,v in next, game:GetService("ReplicatedStorage")["ACS_Engine"]:GetDescendants() do
		if v:IsA("ModuleScript") and v.Name =="Config" then
			return v
		end
	end
end
function getV()
	for i, v in pairs(game.ReplicatedStorage:GetDescendants()) do
		if v:IsA('Configuration') and v.Name ~="Framework" then
			return v
		end
	end
end
local GETV = getV()
local GETC = getConfig()
print(tostring(GETV))


local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:connect(function()
	vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	wait(1)
	vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

local SilentAimSettings = {
	Enabled = false,

	ClassName = "-",
	ToggleKey = "K",

	TeamCheck = false,
	VisibleCheck = false, 
	TargetPart = "Head",
	SilentAimMethod = "Raycast",

	FOVRadius = 360,
	FOVVisible = false,
	ShowSilentAimTarget = false, 

	MouseHitPrediction = false,
	MouseHitPredictionAmount = 1,
	HitChance = 100
}

-- variables
getgenv().SilentAimSettings = Settings
local MainFileName = "KakahMenuSilent"
local SelectedFile, FileToSave = "", ""

local Camera = workspace.CurrentCamera
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local GuiService = game:GetService("GuiService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local GetChildren = game.GetChildren
local GetPlayers = Players.GetPlayers
local WorldToScreen = Camera.WorldToScreenPoint
local WorldToViewportPoint = Camera.WorldToViewportPoint
local GetPartsObscuringTarget = Camera.GetPartsObscuringTarget
local FindFirstChild = game.FindFirstChild
local RenderStepped = RunService.RenderStepped
local GuiInset = GuiService.GetGuiInset
local GetMouseLocation = UserInputService.GetMouseLocation

local resume = coroutine.resume 
local create = coroutine.create

local ValidTargetParts = {"Head", "HumanoidRootPart"}
local PredictionAmount = 0.165

local mouse_box = Drawing.new("Square")
mouse_box.Visible = false 
mouse_box.ZIndex = 999 
mouse_box.Color = Color3.fromRGB(54, 57, 241)
mouse_box.Thickness = 20 
mouse_box.Size = Vector2.new(20, 20)
mouse_box.Filled = true 

local fov_circle = Drawing.new("Circle")
fov_circle.Thickness = 1
fov_circle.NumSides = 100
fov_circle.Radius = 180
fov_circle.Filled = false
fov_circle.Visible = false
fov_circle.ZIndex = 999
fov_circle.Transparency = 1
fov_circle.Color = Color3.fromRGB(54, 57, 241)

local ExpectedArguments = {
	FindPartOnRayWithIgnoreList = {
		ArgCountRequired = 3,
		Args = {
			"Instance", "Ray", "table", "boolean", "boolean"
		}
	},
	FindPartOnRayWithWhitelist = {
		ArgCountRequired = 3,
		Args = {
			"Instance", "Ray", "table", "boolean"
		}
	},
	FindPartOnRay = {
		ArgCountRequired = 2,
		Args = {
			"Instance", "Ray", "Instance", "boolean", "boolean"
		}
	},
	Raycast = {
		ArgCountRequired = 3,
		Args = {
			"Instance", "Vector3", "Vector3", "RaycastParams"
		}
	}
}

function CalculateChance(Percentage)
	-- // Floor the percentage
	Percentage = math.floor(Percentage)

	-- // Get the chance
	local chance = math.floor(Random.new().NextNumber(Random.new(), 0, 1) * 100) / 100

	-- // Return
	return chance <= Percentage / 100
end


--[[file handling]] do 
	if not isfolder(MainFileName) then 
		makefolder(MainFileName);
	end

	if not isfolder(string.format("%s/%s", MainFileName, tostring(game.PlaceId))) then 
		makefolder(string.format("%s/%s", MainFileName, tostring(game.PlaceId)))
	end
end

local Files = listfiles(string.format("%s/%s", "KakahMenuSilent", tostring(game.PlaceId)))

-- functions
local function GetFiles() -- credits to the linoria lib for this function, listfiles returns the files full path and its annoying
	local out = {}
	for i = 1, #Files do
		local file = Files[i]
		if file:sub(-4) == '.lua' then
			-- i hate this but it has to be done ...

			local pos = file:find('.lua', 1, true)
			local start = pos

			local char = file:sub(pos, pos)
			while char ~= '/' and char ~= '\\' and char ~= '' do
				pos = pos - 1
				char = file:sub(pos, pos)
			end

			if char == '/' or char == '\\' then
				table.insert(out, file:sub(pos + 1, start - 1))
			end
		end
	end

	return out
end

local function UpdateFile(FileName)
	assert(FileName or FileName == "string", "oopsies");
	writefile(string.format("%s/%s/%s.lua", MainFileName, tostring(game.PlaceId), FileName), HttpService:JSONEncode(SilentAimSettings))
end

local function LoadFile(FileName)
	assert(FileName or FileName == "string", "oopsies");

	local File = string.format("%s/%s/%s.lua", MainFileName, tostring(game.PlaceId), FileName)
	local ConfigData = HttpService:JSONDecode(readfile(File))
	for Index, Value in next, ConfigData do
		SilentAimSettings[Index] = Value
	end
end

local function getPositionOnScreen(Vector)
	local Vec3, OnScreen = WorldToScreen(Camera, Vector)
	return Vector2.new(Vec3.X, Vec3.Y), OnScreen
end

local function ValidateArguments(Args, RayMethod)
	local Matches = 0
	if #Args < RayMethod.ArgCountRequired then
		return false
	end
	for Pos, Argument in next, Args do
		if typeof(Argument) == RayMethod.Args[Pos] then
			Matches = Matches + 1
		end
	end
	return Matches >= RayMethod.ArgCountRequired
end

local function getDirection(Origin, Position)
	return (Position - Origin).Unit * 1000
end

local function getMousePosition()
	return GetMouseLocation(UserInputService)
end

local function IsPlayerVisible(Player)
	local PlayerCharacter = Player.Character
	local LocalPlayerCharacter = LocalPlayer.Character

	if not (PlayerCharacter or LocalPlayerCharacter) then return end 

	local PlayerRoot = FindFirstChild(PlayerCharacter, Options.TargetPart.Value) or FindFirstChild(PlayerCharacter, "HumanoidRootPart")

	if not PlayerRoot then return end 

	local CastPoints, IgnoreList = {PlayerRoot.Position, LocalPlayerCharacter, PlayerCharacter}, {LocalPlayerCharacter, PlayerCharacter}
	local ObscuringObjects = #GetPartsObscuringTarget(Camera, CastPoints, IgnoreList)

	return ((ObscuringObjects == 0 and true) or (ObscuringObjects > 0 and false))
end

local function getClosestPlayer()
	if not Options.TargetPart.Value then return end
	local Closest
	local DistanceToMouse
	for _, Player in next, GetPlayers(Players) do
		if Player == LocalPlayer then continue end
		if Toggles.TeamCheck.Value and Player.Team == LocalPlayer.Team then continue end

		local Character = Player.Character
		if not Character then continue end

		if Toggles.VisibleCheck.Value and not IsPlayerVisible(Player) then continue end

		local HumanoidRootPart = FindFirstChild(Character, "HumanoidRootPart")
		local Humanoid = FindFirstChild(Character, "Humanoid")
		if not HumanoidRootPart or not Humanoid or Humanoid and Humanoid.Health <= 0 then continue end

		local ScreenPosition, OnScreen = getPositionOnScreen(HumanoidRootPart.Position)
		if not OnScreen then continue end

		local Distance = (getMousePosition() - ScreenPosition).Magnitude
		if Distance <= (DistanceToMouse or Options.Radius.Value or 2000) then
			Closest = ((Options.TargetPart.Value == "Random" and Character[ValidTargetParts[math.random(1, #ValidTargetParts)]]) or Character[Options.TargetPart.Value])
			DistanceToMouse = Distance
		end
	end
	return Closest
end
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/Jxereas/UI-Libraries/main/notification_gui_library.lua", true))()

-- Notification.new("error", "Error Heading", "Error body message.") 
-- Notification.new("success", "Success Heading", "Success body message.")
-- Notification.new("info", "Information Heading", "Information body message.")
-- Notification.new("warning", "Warning Heading", "Warning body message.") 
-- Notification.new("message", "Message Heading", "Message body message.") 


-- \\ Combat Box //
local repo = 'https://raw.githubusercontent.com/shlexware/Orion/main/source'
local Library = loadstring(game:HttpGet(repo))()
-- \\ Window //
local Window = Library:MakeWindow({
	Name = 'Kakah Menu Roleplay',
	HidePremium = true
})

local CombatTab = Window:MakeTab({Name = "Combat",PremiumOnly =  false })

local silent = CombatTab:AddSection({Name = "Opções do Silent"})



silent:AddToggle({Name = "Equipe Check", Default = SilentAimSettings.TeamCheck,
	Callback = function(Value)
		SilentAimSettings.TeamCheck = Value 
	end})


silent:AddToggle({Name = "Visible Check", Default = SilentAimSettings.VisibleCheck,Callback = function(Value) SilentAimSettings.VisibleCheck = Value end})

silent:AddDropdown({Name = "Target", Default = SilentAimSettings.TargetPart, Options = {"Head", "HumanoidRootPart", "Random"},Callback = function(Value) SilentAimSettings.TargetPart = Value  end})


silent:AddSlider({
	Name = 'Hit chance',
	Min = 0,
	Max = 100,
	Default = 100,
	Color = Color3.fromRGB(255,255,255),
	Callback = function(Value)
		SilentAimSettings.HitChance = Value
	end
})


local FOV = CombatTab:AddSection({Name = "FOV"})


FOV:AddToggle({
	Name = "Show FOV Circle",
	Callback = function(Value)
		fov_circle.Visible = Value 
		SilentAimSettings.FOVVisible = Value
	end
})

FOV:AddSlider({
	Name = "FOV Radius",
	Min = 0,
	Max = 360,
	Default = 130, 
	Callback = function(Value)
		fov_circle.Radius = Value
		SilentAimSettings.FOVRadius = Value
	end
})



FOV:AddToggle({
	Name = "Aim Target",
	Default = false,
	Callback = function(Value)
		mouse_box.Visible = Value
		SilentAimSettings.ShowSilentAimTarget = Value
	end
})


-- \\ Tabs //
local GameTab = Window:MakeTab({Name = "Guns Editor",PremiumOnly = false})
local VisualsTab = Window:MakeTab({Name = "Visuals",PremiumOnly = false})
local PlayerTab = Window:MakeTab({Name = "Player",PremiumOnly = false})
local TrollTab = Window:MakeTab({Name = "Troll",PremiumOnly = false})
local SettingsTab = Window:MakeTab({Name = "Settings",PremiumOnly = false})

-- \\ Box //
local GunMod = GameTab:AddSection({Name = "Gun Modifications"})

GunMod:AddLabel('Only ACS - 2.0.1')

local InfAmmoButton = GunMod:AddButton({
	Name = "Inf Ammo",
	Callback = function()
		for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
			if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
				if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
					MOD = v.Parent["TGIRoleplay_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.Ammo = math.huge;
					SCRIPTMOD.AmmoInGun = math.huge;
					SCRIPTMOD.StoredAmmo = math.huge;
					SCRIPTMOD.MaxStoredAmmo = math.huge;
				else
					MOD = v.Parent["ACS_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.Ammo = math.huge;
					SCRIPTMOD.AmmoInGun = math.huge;
					SCRIPTMOD.StoredAmmo = math.huge;
					SCRIPTMOD.MaxStoredAmmo = math.huge;
				end
			end
		end
	end
})

local NoSpreadButton = GunMod:AddButton({
	Name = "No Spread", 
	Callback = function()
		for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
			if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
				if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
					MOD = v.Parent["TGIRoleplay_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.MinSpread = 0.00001;
					SCRIPTMOD.MaxSpread = 0.00002;
				else
					MOD = v.Parent["ACS_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.MinSpread = 0.00001;
					SCRIPTMOD.MaxSpread = 0.00002;
				end
			end
		end
	end
})
local NoRecoilButton = GunMod:AddButton({
	Name = "No Recoil", 
	Callback = function()
		for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
			if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
				if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
					MOD = v.Parent["TGIRoleplay_Settings"];
					SCRIPTMOD = require(MOD);
					--cam
					SCRIPTMOD.camRecoil.camRecoilUp = {0,0};
					SCRIPTMOD.camRecoil.camRecoilTilt = {0,0};
					SCRIPTMOD.camRecoil.camRecoilLeft = {0,0};
					SCRIPTMOD.camRecoil.camRecoilRight = {0,0};
					--gun
					SCRIPTMOD.gunRecoil.gunRecoilUp = {0,0};
					SCRIPTMOD.gunRecoil.gunRecoilTilt = {0,0};
					SCRIPTMOD.gunRecoil.gunRecoilLeft = {0,0};
					SCRIPTMOD.gunRecoil.gunRecoilRight = {0,0};
				else
					MOD = v.Parent["ACS_Settings"];
					SCRIPTMOD = require(MOD);
					--cam
					SCRIPTMOD.camRecoil.camRecoilUp = {0,0};
					SCRIPTMOD.camRecoil.camRecoilTilt = {0,0};
					SCRIPTMOD.camRecoil.camRecoilLeft = {0,0};
					SCRIPTMOD.camRecoil.camRecoilRight = {0,0};
					--gun
					SCRIPTMOD.gunRecoil.gunRecoilUp = {0,0};
					SCRIPTMOD.gunRecoil.gunRecoilTilt = {0,0};
					SCRIPTMOD.gunRecoil.gunRecoilLeft = {0,0};
					SCRIPTMOD.gunRecoil.gunRecoilRight = {0,0};
				end
			end
		end
	end
})
local NoBulletDropButton = GunMod:AddButton({
	Name = "No Bullet Drop",
	Callback = function()
		for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
			if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
				if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
					MOD = v.Parent["TGIRoleplay_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.BulletDrop= 0
				else
					MOD = v.Parent["ACS_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.BulletDrop= 0
				end
			end
		end
	end
})
GunMod:AddToggle({
	Name = "AntiBreak",
	Default = false, 
	Callback = function(Value)
		for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
			if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
				if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
					MOD = v.Parent["TGIRoleplay_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.CanBreak = Value;
				else
					MOD = v.Parent["ACS_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.CanBreak = Value;
				end
			end
		end
	end
})

GunMod:AddSlider({
	Name = "Change Damage",
	Min = 5, 
	Max = 500, 
	Default = 5,
	Callback = function(Value)
		for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
			if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
				if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
					MOD = v.Parent["TGIRoleplay_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.MinDamage = Value
				else
					MOD = v.Parent["ACS_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.MinDamage = Value
				end
			end
		end
	end
})

GunMod:AddDropdown({
	Name = "FireModeDrop",
	Default = 1,
	Options = {"Auto","Burst", "Semi"},
	Callback = function(Value)
		if Value == "Auto" then
			for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
				if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
					if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
						MOD = v.Parent["TGIRoleplay_Settings"];
						SCRIPTMOD = require(MOD);
						SCRIPTMOD.ShootType = 3
					else
						MOD = v.Parent["ACS_Settings"];
						SCRIPTMOD = require(MOD);
						SCRIPTMOD.ShootType = 3
					end
				end
			end
		elseif Value == "Burst" then
			for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
				if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
					if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
						MOD = v.Parent["TGIRoleplay_Settings"];
						SCRIPTMOD = require(MOD);
						SCRIPTMOD.ShootType = 2
					else
						MOD = v.Parent["ACS_Settings"];
						SCRIPTMOD = require(MOD);
						SCRIPTMOD.ShootType = 2
					end
				end
			end
		elseif Value == "Semi" then
			for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
				if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
					if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
						MOD = v.Parent["TGIRoleplay_Settings"];
						SCRIPTMOD = require(MOD);
						SCRIPTMOD.ShootType = 1
					else
						MOD = v.Parent["ACS_Settings"];
						SCRIPTMOD = require(MOD);
						SCRIPTMOD.ShootType = 1
					end
				end
			end
		end
	end
})

GunMod:AddTextbox({
	Name = "BurstFireModeAmount", 
	Default = "3",
	TextDisappear = false,
	Callback = function(Value)
		for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
			if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
				if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
					MOD = v.Parent["TGIRoleplay_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.BurstShot = Options.BurstFireModeAmount.Value
				else
					MOD = v.Parent["ACS_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.BurstShot = Options.BurstFireModeAmount.Value
				end
			end
		end
	end
})

local GunCustom = GameTab:AddSection({Name = "Gun Customize"})




-- Gun Custom
GunCustom:AddDropdown({
	Name = "SelectGunDrop", 
	Default = 1, 
	Options = GUNS,
	Callback = function(Value)
		MOD = game:GetService("Players").LocalPlayer.Backpack[Value]["TGIRoleplay_Settings"];
	end
})
GunCustom:AddDropdown({
	Name = 'AttachScopeDrop', 
	Default = 1,
	Options = {"Acog","TA33 Acog", "PM II"}, 
	Callback = function(Value)

		if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
			MOD = game:GetService("Players").LocalPlayer.Backpack[Options.SelectGunDrop.Value]["TGIRoleplay_Settings"];
		else
			MOD = game:GetService("Players").LocalPlayer.Backpack[Options.SelectGunDrop.Value]["ACS_Settings"];
		end
		SCRIPTMOD = require(MOD);
		SCRIPTMOD.SightAtt = "";
		SCRIPTMOD.SightAtt = Value;
	end
})

GunCustom:AddDropdown({
	Name = "AttachBarrelDrop",
	Default = 1, 
	Options = {"Suppressor","Flash Hider"}, 
	Callback = function(Value)
		if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
			MOD = game:GetService("Players").LocalPlayer.Backpack[GUNS]["TGIRoleplay_Settings"];
		else
			MOD = game:GetService("Players").LocalPlayer.Backpack[GUNS]["ACS_Settings"];
		end
		SCRIPTMOD = require(MOD);
		SCRIPTMOD.SightAtt = "";
		SCRIPTMOD.SightAtt = Value;
	end
})
GunCustom:AddDropdown({
	Name = "AttachOthersUtiliesDrop",
	Default = 1,
	Options = {"Laser","Bipod", "AN PEQ"}, 
	Callback = function(Value)
		if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
			MOD = game:GetService("Players").LocalPlayer.Backpack[GUNS]["TGIRoleplay_Settings"];
		else
			MOD = game:GetService("Players").LocalPlayer.Backpack[GUNS]["ACS_Settings"];
		end
		SCRIPTMOD = require(MOD);
		SCRIPTMOD.SightAtt = "";
		SCRIPTMOD.SightAtt = Value;
	end
})

GunCustom:AddButton({
	Name = "Unequip all utilities",
	Callback = function()
		if game.PlaceId == 9483667454 or 6911111094 then
			MOD = game:GetService("Players").LocalPlayer.Backpack[GUNS]["TGIRoleplay_Settings"];
		else
			MOD = game:GetService("Players").LocalPlayer.Backpack[GUNS]["ACS_Settings"];
		end
		SCRIPTMOD = require(MOD);
		SCRIPTMOD.SightAtt = "";
		SCRIPTMOD.BarrelAtt = "";
		SCRIPTMOD.OtherAtt = "";
	end
})

-- Visuals
local CharacterTab = PlayerTab:AddSection({Name = 'Character'})
local EspBox = VisualsTab:AddSection({Name = 'ESP'})
local CombatVisuals = VisualsTab:AddSection({Name = 'Combat Visuals'})
local MenuBox = VisualsTab:AddSection({Name = 'Menu Visuals'})
local CrosshairBox = VisualsTab:AddSection({Name = 'CrossHair'})
local ServerTab = TrollTab:AddSection({Name = 'Server'})
local PlayersTab = TrollTab:AddSection({Name = 'Players'})
local MenuSettingsBox = SettingsTab:AddSection({Name = 'Menu Settings'})
local MiscBox = SettingsTab:AddSection({Name = 'Misc'})

local espLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Sirius/request/library/esp/esp.lua"))()
espLibrary.whitelist = {}
espLibrary.blacklist = {}
EspBox:AddToggle({
	Name = 'TeamESPtoggle', 
	Default = false, 
	Callback = function(Value)
		espLibrary.options.teamCheck = Value
	end
})
EspBox:AddToggle({
	Name = 'TeamColorEsp', 
	Default = false, 
	Callback = function(Value)
		espLibrary.options.teamColor = Value
	end
})
EspBox:AddLabel('ESP Color')
EspBox:AddColorpicker({
	Name = 'ESPColorPicker', 
	Default = Color3.fromRGB(37, 98, 255),
	Callback = function(Value)

		espLibrary.options.whitelistColor = Value
		espLibrary.options.outOfViewArrowsColor = Value
		espLibrary.options.outOfViewArrowsOutlineColor = Value
		espLibrary.options.nameColor = Value
		espLibrary.options.boxesColor = Value
		espLibrary.options.boxFillColor = Value
		espLibrary.options.healthBarsColor = Value
		espLibrary.options.healthTextColor = Value
		espLibrary.options.distanceColor = Value
		espLibrary.options.tracerColor = Value
		espLibrary.options.chamsFillColor = Value
	end
})

EspBox:AddToggle({
	Name = 'AtivarEsp', 
	Default = false, 
	Callback = function(Value)
		espLibrary.options.visible = Value
	end
})
EspBox:AddToggle({
	Name = 'Nome Players esp', 
	Default = false, 
	Callback = function(Value)
		espLibrary.options.names = Value
	end
})
EspBox:AddToggle({
	Name = 'outOfViewArrowsESPtoggle', 
	Default = false, 
	Callback = function(Value)
		espLibrary.options.outOfViewArrows = Value
		espLibrary.options.outOfViewArrowsFilled = Value
		espLibrary.options.outOfViewArrowsOutline  = Value
	end
})
EspBox:AddToggle({
	Name = 'DistanciaEsp', 
	Default = false, 
	Callback = function(Value)
		espLibrary.options.distance = Value
	end
})
EspBox:AddToggle({
	Name = 'HealthBar', 
	Default = false, 
	Callback = function(Value)
		espLibrary.options.healthBars = Value
	end
})
EspBox:AddToggle({
	Name = 'Texto da Vida esp', 
	Default = false, 
	Callback = function(Value)
		espLibrary.options.healthText = Value
	end
})
EspBox:AddToggle({
	Name = 'BoxESP', 
	Default = false, 
	Callback = function(Value)
		espLibrary.options.boxes = Value
	end
})
EspBox:AddDropdown({
	Name = 'tracerOriginDrop', 
	Default = 1,
	Options = {"Bottom", "Top", "Mouse"},
	Callback = function(Value)
		espLibrary.options.tracerOrigin = Value
	end
})
EspBox:AddToggle({
	Name = 'TracerESP', 
	Default = false, 
	Callback = function(Value)
		espLibrary.options.tracers = Value
	end
})

EspBox:AddToggle({
	Name = 'ESPToggle', 
	Default = false, 
	Callback = function(Value)
		espLibrary.options.enabled = Value
		espLibrary.options.visibleOnly = Value
		print(espLibrary.options.enabled)
		print(espLibrary.options.visibleOnly)
	end
})



CombatVisuals:AddToggle({
	Name = "WeaponModel",
	Default = false,
	Callback = function(Value)
		g = Value
		if g== true then
			for i, v in pairs(game:GetService("ReplicatedStorage")["ACS_Engine"].GunModels:GetDescendants()) do
				if v.ClassName=='Part' or v.ClassName=='UnionOperation'then
					v.Color= Value
					wait()
				end
			end
		end
	end
})
CombatVisuals:AddDropdown({
	Name = 'WeaponMaterialDrop', 
	Default = 1,
	Options = {'SmoothPlastic', 'Wood', 'Slate', 'Concrete', 'CorrodedMetal', 'DiamondPlate', 'Foil', 'Grass', 'Ice', 'Marble', 'Granite', 'Brick', 'Pebble', 'Sand', 'Fabric', 'Plastic', 'Metal', 'WoodPlanks', 'Cobblestone', 'Air', 'Water', 'Rock', 'Glacier', 'Snow', 'Sandstone', 'Mud', 'Basalt', 'Ground', 'CrackedLava', 'Neon', 'Glass', 'Asphalt', 'LeafyGrass', 'Salt', 'Limestone', 'Pavement', 'ForceField'}, 
	Callback = function(Value)
		local g = true
		if g==true then
			for i, v in pairs(game:GetService("ReplicatedStorage")["ACS_Engine"].GunModels:GetDescendants()) do
				if v.ClassName=='Part' or v.ClassName=='UnionOperation'then
					v.Material= Value
					wait()
				end
			end
		end
	end
})

CrosshairBox:AddToggle({
	Name = 'HabilitarCrossair', 
	Default = false,
	Callback = function(Value)
		for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
			if v.Name == "ACS_Animations" and v.Parent.Name ~= "Knife" and v.Parent.Name ~= "M67" and v.Parent.Name ~= "Flashbang"  then
				if game.PlaceId==9483667454 or game.PlaceId== 6911111094 then
					MOD = v.Parent["TGIRoleplay_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.CrossHair= Value
					SCRIPTMOD.CenterDot = Value
				else
					MOD = v.Parent["ACS_Settings"];
					SCRIPTMOD = require(MOD);
					SCRIPTMOD.CrossHair = Value
					SCRIPTMOD.CenterDot = Value
				end
			end
		end
	end
})

-- Character Tab

local modcharacter = GETC
local requiredc = require(modcharacter);

CharacterTab:AddSlider({
	Name = 'Change WalkSpeed',
	Default = 24,
	Min = 0,
	Max = 500,
	Callback = function(Value)
		requiredc.RunWalkSpeed = Value
	end
})

CharacterTab:AddSlider({
	Name = 'Alterar Tempo WalkSpeed',
	Default = 24,
	Min = 0,
	Max = 500,
	Callback = function(Value)
		requiredc.CrouchWalkSpeed = Value
	end
})

CharacterTab:AddSlider({
	Name = 'Alterar JumpPower',
	Default = 50,
	Min = 0,
	Max = 500,
	Callback = function(Value)
		game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
	end
})
CharacterTab:AddSlider({
	Name = 'Alterar Campo de Visão',
	Default = 70,
	Min = 70,
	Max = 120,
	Callback = function(Value)
		game.Workspace.Camera.FieldOfView = Value
	end
})
CharacterTab:AddSlider({
	Name = 'Alterar Gravidade',
	Default = 192,
	Min = 0,
	Max = 1000,
	Callback = function(Value)
		game.Workspace.Gravity = Value
	end
})
CharacterTab:AddSlider({
	Name = 'Alterar Hora Mundial',
	Default = 12,
	Min = 0,
	Max = 23,
	Callback = function(Value)
		game.Lighting.ClockTime = Value
	end
})

CharacterTab:AddToggle({
	Name = "InfStaminaToggle",
	Default = false,
	Callback = function()
		if requiredc.EnableStamina == true then
			requiredc.EnableStamina = false;
		else
			requiredc.EnableStamina = true
		end
	end
})
CharacterTab:AddToggle({
	Name = 'Remove JumpCooldown',
	Default = false, 
	Callback = function()
		local OLDJUMP = requiredc.JumpCoolDown
		if requiredc.JumpCoolDown ~= 0 then
			requiredc.JumpCoolDown = 0;
		else
			requiredc.JumpCoolDown = OLDJUMP
		end
	end
})
CharacterTab:AddToggle({
	Name = 'Remove FallDamage', 
	Default = false,
	Callback = function()
		if requiredc.EnableFallDamage == true then
			requiredc.EnableFallDamage = false;
		else
			requiredc.EnableFallDamage = true
		end
	end
})
CharacterTab:AddToggle({
	Name = 'Anti Drown', 
	Default = false,
	Callback = function()
		if requiredc.CanDrown == true then
			requiredc.CanDrown = false;
		else
			requiredc.CanDrown = true
		end
	end
})
CharacterTab:AddToggle({
	Name = 'BunnyHob', 
	Default = false,
	Callback = function()
		if requiredc.AntiBunnyHop == true then
			requiredc.AntiBunnyHop = false;
		else
			requiredc.AntiBunnyHop = true
		end
	end
})



ServerTab:AddButton({
	Name = "Crash Server", 
	Callback = function()

		while true do
			for i=1,10 do
				GETV.Events.ServerBullet:FireServer(Vector3.new(0/0/0),Vector3.new(0/0/0))
			end
			task.wait()
		end

	end
})

ServerTab:AddButton({
	Name = "Lag Server", 
	Callback = function()

		GETV.Events.ServerBullet:FireServer(Vector3.new(0/0/0),Vector3.new(0/0/0))

	end
})
ServerTab:AddToggle({
	Name = 'Loop Whizz Server', 
	Default = false, 
	Callback = function(Value)
		while Value ==true do task.wait(0.1)
			for i, player in pairs(game.Players:GetPlayers()) do
				GETV.Events.Whizz:FireServer(player)
			end
		end
	end
})
ServerTab:AddToggle({
	Name = 'Loop Supress Server', 
	Default = false, 
	Callback = function(Value)
		while Value == true do task.wait(0.1)
			for i, player in pairs(game.Players:GetPlayers()) do
				local ohInstance1 = player
				local ohNumber2 = 1
				GETV.Events.Suppression:FireServer(ohInstance1, ohNumber2)
			end
		end
	end
})
--hiding it cus idk why it dont work
--[[
-- // Players
PLR = {}
for i, v in pairs(game.Players:GetPlayers()) do
	if v.Name ~= game.Players.LocalPlayer.Name then
		table.insert(PLR, v.Name) 
	end
end

PlayersTab:AddDropdown({Name = 'SelectPlrDrop', Default = 1,Options = PLR})
PlayersTab:AddToggle({
Name = 'Loop Whizz Player', 
Default = false, 
Callback = function(Value)
while Value ==true do task.wait(0.1)
		while Value ==true do task.wait(0.05)
			local args = {[1] = game:GetService("Players")[Target.Options]}
			GETV.Events.Whizz:FireServer(unpack(args))
		end
	end
	})
	
PlayersTab:AddToggle('SupressPLRToggle', {Text = 'Loop Supress Player', Default = false, Tooltip = 'Enable Supress Player.',})
Toggles.WhizzPLRToggle:OnChanged(function()
	while Toggles.WhizzPLRToggle.Value==true do task.wait(0.1)
		while Toggles.SupressSERVERToggle.Value==true do task.wait(0.05)
			local args = {[1] = game:GetService("Players")[Options.SelectPlrDrop.Value]}
			GETV.Events.Whizz:FireServer(unpack(args))
		end
	end
end)
Toggles.SupressPLRToggle:OnChanged(function()
	while Toggles.SupressSERVERToggle.Value==true do task.wait(0.05)
		local ohInstance1 = game:GetService("Players")[Options.SelectPlrDrop.Value]
		local ohNumber2 = 1
		GETV.Events.Suppression:FireServer(ohInstance1, ohNumber2)
	end
end)
--]]

-- Settings

MenuSettingsBox:AddButton({Name = "Unload", Callback = function() OrionLib:Destroy() end})
MiscBox:AddLabel('Username: '.. game.Players.LocalPlayer.Name)
MiscBox:AddLabel('UserID: '.. game.Players.LocalPlayer.UserId)
MiscBox:AddLabel('Exploit: '..identifyexecutor())
MiscBox:AddLabel('PlaceID: '..game.PlaceId)
MiscBox:AddButton({
	Name = "Rejoin",
	Callback = function()
		game:GetService("TeleportService"):Teleport(game.PlaceId, game.Players.LocalPlayer)
	end
})


-- End Scripts

resume(create(function()
	RenderStepped:Connect(function()
		if  Toggles.MousePosition.Value and Toggles.aim_Enabled.Value  then
			if getClosestPlayer() then 
				local Root = getClosestPlayer().Parent.PrimaryPart or getClosestPlayer()
				local RootToViewportPoint, IsOnScreen = WorldToViewportPoint(Camera, Root.Position);

				mouse_box.Visible = IsOnScreen
				mouse_box.Position = Vector2.new(RootToViewportPoint.X, RootToViewportPoint.Y)
			else 
				mouse_box.Visible = false 
				mouse_box.Position = Vector2.new()
			end
		end

		if Toggles.Visible.Value then 
			fov_circle.Visible = Toggles.Visible.Value
			fov_circle.Color = Options.Color.Value
			fov_circle.Position = workspace.CurrentCamera.ViewportSize / 2
		end
	end)
end))

-- that kicking you

-- hooks
--[[local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", newcclosure(function(...)
	local Method = getnamecallmethod()
	local Arguments = {...}
	local self = Arguments[1]
	local chance = CalculateChance(SilentAimSettings.HitChance)
	if Toggles.aim_Enabled.Value and self == workspace and not checkcaller() and chance == true then
		if ValidateArguments(Arguments, ExpectedArguments.Raycast) then
			local A_Origin = Arguments[2]

			local HitPart = getClosestPlayer()
			if HitPart then
				Arguments[3] = getDirection(A_Origin, HitPart.Position)

				return oldNamecall(unpack(Arguments))
			end
		end
	end
	return oldNamecall(...)
end))
OptionsMethodValue = false
local oldIndex = nil 
oldIndex = hookmetamethod(game, "__index", newcclosure(function(self, Index)
	if self == Mouse and not checkcaller() and Toggles.aim_Enabled.Value and OptionsMethodValue == true and getClosestPlayer() then
		local HitPart = getClosestPlayer()

		if Index == "Target" or Index == "target" then 
			return HitPart
		elseif Index == "Hit" or Index == "hit" then 
			return ((Toggles.Prediction.Value and (HitPart.CFrame + (HitPart.Velocity * PredictionAmount))) or (not Toggles.Prediction.Value and HitPart.CFrame))
		elseif Index == "X" or Index == "x" then 
			return self.X 
		elseif Index == "Y" or Index == "y" then 
			return self.Y 
		elseif Index == "UnitRay" then 
			return Ray.new(self.Origin, (self.Hit - self.Origin).Unit)
		end
	end

	return oldIndex(self, Index)
end))]]

OrionLib:Init()
   -- The function that takes place when the button is pressed
   end,
})